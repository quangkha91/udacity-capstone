org: khanq1
app: serverless-fashion-app
service: serverless-fashion-app
frameworkVersion: '3.32.2'

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs16.x
  profile: default
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    FASHIONS_TABLE: Fashions-${self:provider.stage}
    FASHIONS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: khanq1-fashion-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    restApi: true

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetFashions:
    handler: src/lambda/http/getFashions.handler
    events:
      - http:
          method: get
          path: fashions
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FASHIONS_TABLE}'
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FASHIONS_TABLE}/index/${self:provider.environment.FASHIONS_CREATED_AT_INDEX}'
  
  GetFashionById:
    handler: src/lambda/http/getFashionById.handler
    events:
      - http:
          method: get
          path: fashions/{fashionId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FASHIONS_TABLE}'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'
          
  CreateFashion:
    handler: src/lambda/http/createFashion.handler
    events:
      - http:
          method: post
          path: fashions
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schemas:
              application/json: ${file(models/create-fashion-model.json)}
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FASHIONS_TABLE}'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  UpdateFashion:
    handler: src/lambda/http/updateFashion.handler
    events:
      - http:
          method: patch
          path: fashions/{fashionId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schemas:
              application/json: ${file(models/update-fashion-model.json)}
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FASHIONS_TABLE}'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  DeleteFashion:
    handler: src/lambda/http/deleteFashion.handler
    events:
      - http:
          method: delete
          path: fashions/{fashionId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FASHIONS_TABLE}'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: fashions/{fashionId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
      - Effect: Allow
        Action:
          - dynamodb:updateItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FASHIONS_TABLE}'
      - Effect: 'Allow'
        Action:
          - 'xray:PutTraceSegments'
          - 'xray:PutTelemetryRecords'
        Resource:
          - '*'

resources:
  Resources:
    GatewayResourceDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        Name: request-body-validator
        ValidateRequestBody: true
        ValidateRequestParameters: false

    FashionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: '${self:provider.environment.FASHIONS_TABLE}'
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: fashionId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: fashionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.FASHIONS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        BucketName: '${self:provider.environment.ATTACHMENT_S3_BUCKET}'
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyBucketPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket